{"version":3,"sources":["style/themePalette.js","componentBlocks/StyledTodo/Main.js","componentBlocks/StyledTodo/Header.js","componentBlocks/StyledTodo/TodoInput.js","lib/icons.js","componentBlocks/StyledTodo/TodoItem.js","componentBlocks/StyledTodo/FoldableList/FoldBtn.js","componentBlocks/StyledTodo/FoldableList/FoldableUL.js","componentBlocks/StyledTodo/FoldableList/StatusCounterBoard/StatusCounter.js","componentBlocks/StyledTodo/FoldableList/StatusCounterBoard/index.js","componentBlocks/StyledTodo/FoldableList/TodoList.js","componentBlocks/index.js","settings/index.js","actions/index.js","App.js","serviceWorker.js","index.js"],"names":["theme","color","highlight","highlightReverse","background","boxShadow","alert","StyledMain","styled","main","_templateObject","StyledTodoHeader","_ref","className","children","react_default","a","createElement","Header_templateObject","TodoInput","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleInputChange","bind","assertThisInitialized","handleInputSubmit","state","value","wrongInput","placeholder","evt","defaultSetup","newValue","target","setState","objectSpread","preventDefault","onSubmit","_StyledInput","type","onChange","_css","React","Component","StyledTodoInput","withConfig","displayName","componentId","DeleteIcon","width","height","viewBox","d","icons_templateObject","CompleteIcon","_templateObject2","StyledTodoItem","todoTitle","onDelete","onStatusToggle","titleUpdator","newTitle","onClick","TodoItem_templateObject","_ref2","status","_ref3","_ref4","FoldBtn","folded","FoldBtn_templateObject","FoldUl","FoldableUL_templateObject","StatusCounter","statusType","count","concat","StatusCounter_templateObject","StatusCounterBoard","todoData","countNumOfStatus","statusName","filter","task","length","StatusCounterBoard_StatusCounter","StatusCounterBoard_templateObject","FoldableList","toggleFold","handleItemStatusToggle","prevState","targetId","onDelClick","updateFn","itemID","_this2","_this$props","ItemTemplate","FoldableList_StatusCounterBoard","FoldableList_FoldBtn","FoldableUL","map","item","key","id","title","handleItemDelete","StyledTodo","Main","Header","StyledHeader","Input","Item","TodoList_templateObject","Settings","defaultTodoData","ID","mappingFn","uuidv4","graphqlApiURI","actions","App","deleteTodoItem","updateTodoItem","addTodoItem","toConsumableArray","getTodoData","request","Request","method","headers","Content-Type","body","JSON","stringify","query","errorHandler","fetch","then","res","json","catch","data","values","getDefaultTasks","todo","newID","newTodoItem","assign","updatedTask","componentBlocks","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bf769195.chunk.js","sourcesContent":["const theme = {\n  color: {\n    highlight: '#0aa',\n    highlightReverse: 'white',\n    background: 'lightcyan',\n    boxShadow: '#888',\n    alert: '#a00',\n  },\n};\n\nexport default theme;\n","import styled from 'styled-components';\nimport theme from '../../style/themePalette';\n\nconst StyledMain = styled.main`\n  display: grid;\n  grid-template-columns: 5% 90% 5%;\n  grid-template-rows: 10% 15% 15% 50% 10%;\n\n  background-color: ${theme.color.background};\n  box-shadow: 2.5rem 2.5rem ${theme.color.boxShadow};\n  position: absolute;\n  left: 50%;\n  transform: translate3d(-50%, 0, 0);\n  top: 10%;\n  width: 64rem;\n  height: 72rem;\n`;\n\nexport default StyledMain;\n","import React from 'react';\nimport styled from 'styled-components';\n\nfunction TodoHeader({ className, children }) {\n  return <header className={className}>{children}</header>;\n}\n\nconst StyledTodoHeader = styled(TodoHeader)`\n  grid-column: 2 / 3;\n  grid-row: 2 / 3;\n  * {\n    margin: 1rem auto;\n  }\n  border-bottom: 1px solid lightgray;\n`;\n\nexport default StyledTodoHeader;\n","import React from 'react';\nimport 'styled-components/macro'; // CSS prop support\nimport styled from 'styled-components';\nimport theme from '../../style/themePalette';\n\nclass TodoInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleInputSubmit = this.handleInputSubmit.bind(this);\n    this.state = {\n      value: '',\n      wrongInput: false,\n      placeholder: props.placeholder,\n    };\n  }\n\n  handleInputChange(evt) {\n    const defaultSetup = { placeholder: this.props.placeholder, wrongInput: false };\n    const newValue = evt.target.value;\n\n    this.setState(() => ({ value: newValue, ...defaultSetup }));\n  }\n\n  handleInputSubmit(evt) {\n    evt.preventDefault();\n    const { value } = this.state;\n\n    // Alert user on form submit without input\n    if (value === '') {\n      this.setState({ placeholder: \"Sorry, we can't create empty todo\", wrongInput: true });\n      return;\n    }\n    const { onSubmit } = this.props;\n    onSubmit(value);\n\n    this.setState({ value: '' });\n  }\n\n  render() {\n    const { className } = this.props;\n    return (\n      <form className={className} onSubmit={this.handleInputSubmit}>\n        <input\n          css={this.state.wrongInput ? 'box-shadow: 0px 0px 0px 5px #f66;' : null}\n          placeholder={this.state.placeholder}\n          type=\"text\"\n          onChange={this.handleInputChange}\n          value={this.state.value}\n        />\n        <input type=\"submit\" value=\"Add Item\" />\n      </form>\n    );\n  }\n}\n\nconst StyledTodoInput = styled(TodoInput)`\n  display: grid;\n  grid-template-columns: auto 20%;\n  grid-template-rows: 10% auto 10%;\n  column-gap: 1rem;\n\n  input[type='text'] {\n    grid-column: 1;\n    grid-row: 2;\n    font-size: 2rem;\n    padding-left: 2rem;\n    border: 1px solid ${theme.color.highlight};\n    &::placeholder {\n      font-style: italic;\n      color: #bbb;\n    }\n  }\n  input[type='submit'] {\n    grid-column: 2;\n    grid-row: 2;\n    background: unset;\n    background-color: ${theme.color.highlight};\n    border: 1px solid ${theme.color.highlightReverse};\n    font-size: 2rem;\n    color: white;\n    transition: all 0.2s;\n\n    &:hover,\n    &:active {\n      background-color: black;\n    }\n  }\n\n  grid-column: 2 / 3;\n  grid-row: 3 / 4;\n`;\n\nexport default StyledTodoInput;\n","import React from 'react';\nimport styled from 'styled-components';\n\nexport const DeleteIcon = styled(props => (\n  <svg\n    className={props.className}\n    width={props.width}\n    height={props.height}\n    viewBox={props.viewBox}\n  >\n    <path d=\"M 10,10 L 30,30 M 30,10 L 10,30\" />\n  </svg>\n))`\n  fill: transparent;\n  stroke-linecap: round;\n  stroke-width: 0.5rem;\n`;\n\nexport const CompleteIcon = styled(props => (\n  <svg\n    className={props.className}\n    width={props.width}\n    height={props.height}\n    viewBox={props.viewBox}\n  >\n    <path d=\"M14.1 27.2l7.1 7.2 16.7-16.8\" />\n  </svg>\n))`\n  fill: transparent;\n  stroke-linecap: round;\n  stroke-width: 0.5rem;\n`;\n\nexport default { DeleteIcon };\n","import React from 'react';\nimport styled from 'styled-components';\nimport { DeleteIcon, CompleteIcon } from '../../lib/icons';\n\nfunction TodoItem({\n  todoTitle, className, onDelete, onStatusToggle, titleUpdator,\n}) {\n  const onTitleChange = (evt) => {\n    const newTitle = evt.target.value;\n\n    titleUpdator(newTitle);\n  };\n\n  return (\n    <li className={className}>\n      <input type=\"text\" value={todoTitle} onChange={onTitleChange} />\n      <button className=\"completeBtn\" onClick={onStatusToggle} type=\"button\">\n        <CompleteIcon height=\"20\" width=\"20\" viewBox=\"10 10 30 30\" />\n      </button>\n      <button className=\"deleteBtn\" onClick={onDelete} type=\"button\">\n        <DeleteIcon height=\"20\" width=\"20\" viewBox=\"5 5 30 30\" />\n      </button>\n    </li>\n  );\n}\n\nconst StyledTodoItem = styled(TodoItem)`\n  display: grid;\n  grid-template-columns: 86% 7% 7%;\n  grid-template-rows: 10% 80% 10%;\n  padding: 1rem;\n  margin: 0 auto;\n  margin-bottom: 1rem;\n  background-color: white;\n  ${({ status }) => {\n    if (status === 'DONE') {\n      return `\n        color: lightgray;\n        text-decoration: line-through;\n      `;\n    }\n    return null;\n  }};\n\n  input {\n    all: unset;\n    grid-column: 1;\n    grid-row: 2;\n  }\n  .deleteBtn {\n    grid-column: 3;\n    grid-row: 2;\n    border: none;\n    background: none;\n    font-size: 2rem;\n    line-height: 100%;\n    border-radius: 5rem;\n    transition: all 0.2s;\n\n    svg {\n      stroke: red;\n    }\n\n    &:hover,\n    &:active {\n      background-color: red;\n      color: white;\n\n      svg {\n        stroke: white;\n      }\n    }\n  }\n  .completeBtn {\n    grid-column: 2;\n    grid-row: 2;\n    border: none;\n    background: none;\n    font-size: 2rem;\n    line-height: 100%;\n    border-radius: 5rem;\n    transition: all 0.2s;\n\n    stroke: ${({ status }) => (status === 'DONE' ? 'lightgray' : '#0aa')};\n\n    &:hover,\n    &:active {\n      background-color: ${({ status }) => (status === 'DONE' ? 'lightgray' : '#0aa')};\n      color: white;\n\n      svg {\n        stroke: white;\n      }\n    }\n  }\n`;\n\nexport default StyledTodoItem;\n","import React from 'react';\nimport styled from 'styled-components';\nimport theme from '../../../style/themePalette';\n\nconst FoldBtn = styled(({ className, folded, onClick }) => (\n  <button type=\"button\" className={className} onClick={onClick}>\n    {folded ? 'Unfold' : 'Fold'}\n  </button>\n))`\n  background: ${props => (props.folded ? theme.color.highlight : 'unset')};\n  border: 1px solid ${props => (props.folded ? 'white' : theme.color.highlight)};\n  font-size: 2rem;\n  color: ${props => (props.folded ? 'white' : theme.color.highlight)};\n  transition: all 0.2s;\n\n  &:hover,\n  &:active {\n    background-color: black;\n  }\n`;\n\nexport default FoldBtn;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst FoldUl = styled(({ className, children }) => <ul className={className}>{children}</ul>)`\n  ${props => (props.folded\n    ? `& > * {\n          height: 0;\n          overflow: hidden;\n          margin: 0;\n          padding: 0;\n        }\n        height: 1rem;\n        overflow: hidden;\n        margin: 0;\n        padding: 0;\n        `\n    : '')}\n`;\n\nexport default FoldUl;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst StatusCounter = styled((props) => {\n  const { statusType, count, className } = props;\n\n  return (\n    <div className={className}>\n      <div className=\"type\">{`${statusType}:`}</div>\n      <div className=\"count\">\n        <span>{`${count}`}</span>\n      </div>\n    </div>\n  );\n})`\n  display: grid;\n  grid-template-columns: 70% 30%;\n\n  background-color: white;\n  color: ${({ color }) => color};\n  font-weight: bold;\n\n  .type {\n    width: 5.5rem;\n\n    grid-column: 1;\n    padding: 0 1rem;\n  }\n  .count {\n    width: 2rem;\n\n    grid-column: 2;\n\n    display: grid;\n    justify-content: right;\n\n    padding-right: 1rem;\n  }\n`;\n\nexport default StatusCounter;\n","import React from 'react';\nimport styled from 'styled-components';\nimport StatusCounter from './StatusCounter';\n\nconst StatusCounterBoard = styled((props) => {\n  const { todoData, className } = props;\n  const countNumOfStatus = statusName => todoData.filter(task => task.status === statusName).length;\n\n  return (\n    <div className={className}>\n      <StatusCounter\n        className=\"todoCounter\"\n        statusType=\"todo\"\n        count={countNumOfStatus('TODO')}\n        color=\"#0aa\"\n      />\n      <StatusCounter\n        className=\"doneCounter\"\n        statusType=\"done\"\n        count={countNumOfStatus('DONE')}\n        color=\"lightgray\"\n      />\n    </div>\n  );\n})`\n  display: grid;\n  grid-template-columns: 50% 50%;\n  align-items: center;\n  font-size: 1.5rem;\n\n  .todoCounter {\n    grid-column: 1;\n    border-radius: 1rem 0 0 1rem;\n    border: 1px solid gray;\n    margin-left: 5%;\n    border-right: none;\n  }\n  .doneCounter {\n    grid-column: 2;\n    border-radius: 0 1rem 1rem 0;\n    border: 1px solid gray;\n    margin-right: 5%;\n  }\n`;\n\nexport default StatusCounterBoard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport FoldBtn from './FoldBtn';\nimport FoldableUL from './FoldableUL';\nimport StatusCounterBoard from './StatusCounterBoard';\n\nclass FoldableList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.toggleFold = this.toggleFold.bind(this);\n    this.handleItemStatusToggle = this.handleItemStatusToggle.bind(this);\n    this.state = {\n      folded: false,\n    };\n  }\n\n  toggleFold() {\n    this.setState(prevState => ({ folded: !prevState.folded }));\n  }\n\n  handleItemDelete(targetId) {\n    const { onDelClick } = this.props;\n\n    onDelClick(targetId);\n  }\n\n  handleItemStatusToggle(targetId, status) {\n    const { updateFn } = this.props;\n    const newStatus = status === 'DONE' ? 'TODO' : 'DONE';\n\n    updateFn({\n      itemID: targetId,\n      status: newStatus,\n    });\n  }\n\n  render() {\n    const { folded } = this.state;\n    const {\n      todoData, className, ItemTemplate, updateFn,\n    } = this.props;\n\n    return (\n      <section className={className}>\n        <header className=\"listHeader\">\n          <div className=\"titleAndCount\">\n            <h2 className=\"title\">Things to Do</h2>\n            <div className=\"statusCountWrapper\">\n              <StatusCounterBoard todoData={todoData} className=\"statusCount\" />\n            </div>\n          </div>\n          <FoldBtn folded={folded} className=\"foldBtn\" onClick={this.toggleFold} />\n        </header>\n        <FoldableUL folded={folded} className=\"foldableUL\">\n          {todoData.map(item => (\n            <ItemTemplate\n              key={item.id}\n              todoTitle={item.title}\n              status={item.status}\n              onDelete={() => this.handleItemDelete(item.id)}\n              onStatusToggle={() => this.handleItemStatusToggle(item.id, item.status)}\n              titleUpdator={newTitle => updateFn({ itemID: item.id, title: newTitle })}\n            />\n          ))}\n        </FoldableUL>\n      </section>\n    );\n  }\n}\n\nFoldableList.propTypes = {\n  todoData: PropTypes.arrayOf(PropTypes.object).isRequired,\n  className: PropTypes.string.isRequired,\n  onDelClick: PropTypes.func.isRequired,\n  updateFn: PropTypes.func.isRequired,\n  ItemTemplate: PropTypes.oneOfType([\n    PropTypes.shape({ styledComponentId: PropTypes.string }).isRequired, // StyledComponent\n    PropTypes.node,\n  ]).isRequired,\n};\n\nconst StyledTodoList = styled(FoldableList)`\n  display: grid;\n  grid-template-columns: 85% 15%;\n  grid-template-rows: 10% 10% 80%;\n\n  grid-column: 2 / 3;\n  grid-row: 4;\n\n  font-size: 2rem;\n  max-height: 32rem;\n  overflow: hidden;\n\n  .listHeader {\n    grid-column: 1 / -1;\n    grid-row: 1;\n\n    display: grid;\n    grid-template-columns: 70% 15% 15%;\n    .titleAndCount {\n      grid-column: 1;\n\n      .title,\n      .statusCountWrapper {\n        display: inline-grid;\n        height: 3.6rem;\n        vertical-align: bottom;\n      }\n\n      .statusCountWrapper {\n        margin-left: 1.5rem;\n      }\n      .statusCountWrapper > .statusCount {\n        display: grid;\n        align-items: center;\n        width: 16rem;\n      }\n    }\n    .foldBtn {\n      grid-column: 3;\n    }\n  }\n\n  .foldableUL {\n    grid-row: 3;\n    grid-column: 1 / 3;\n\n    margin-top: 1rem;\n    border-bottom: 1px dotted black;\n    width: 103%;\n    overflow-y: scroll;\n  }\n`;\n\nexport default StyledTodoList;\n","import StyledMain from './StyledTodo/Main';\nimport StyledHeader from './StyledTodo/Header';\nimport StyledTodoInput from './StyledTodo/TodoInput';\nimport StyledTodoItem from './StyledTodo/TodoItem';\nimport StyledTodoList from './StyledTodo/FoldableList/TodoList';\n\nconst StyledTodo = {\n  Main: StyledMain,\n  Header: StyledHeader,\n  Input: StyledTodoInput,\n  Item: StyledTodoItem,\n  FoldableList: StyledTodoList,\n};\n\nexport default StyledTodo;\n","import uuidv4 from 'uuid';\n\nconst Settings = {\n  defaultTodoData: [\n    { id: 1, title: 'Test Todo', status: 'TODO' },\n    { id: 2, title: 'Hi, there!', status: 'DONE' },\n    { id: 3, title: 'Try Add & Delete!', status: 'TODO' },\n    { id: 4, title: 'And also poke \"Fold\" button on the top-right!', status: 'TODO' },\n  ],\n  ID: {\n    mappingFn: uuidv4,\n  },\n  graphqlApiURI: 'https://codesquadapi.herokuapp.com/graphql',\n};\n\nexport default Settings;\n","export default {\n  GET_DEFAULT: `\n    {\n      getDefaultTasks {\n        id\n        title\n        status\n      }\n    }\n  `,\n};\n","import React from 'react';\nimport StyledTodo from './componentBlocks';\nimport Settings from './settings';\nimport actions from './actions';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.deleteTodoItem = this.deleteTodoItem.bind(this);\n    this.updateTodoItem = this.updateTodoItem.bind(this);\n    this.addTodoItem = this.addTodoItem.bind(this);\n    this.state = {\n      todoData: [\n        // Default value before fetch completion\n        ...Settings.defaultTodoData,\n      ],\n    };\n  }\n\n  componentDidMount() {\n    this.getTodoData();\n  }\n\n  async getTodoData() {\n    const request = new Request(Settings.graphqlApiURI, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ query: actions.GET_DEFAULT }),\n    });\n\n    const errorHandler = (/* error */) => {\n      // Do proper action on error\n      // And dispatch error info to app\n    };\n    const { data } = await fetch(request)\n      .then(res => res.json())\n      .catch(errorHandler);\n\n    this.setState({ todoData: Object.values(data.getDefaultTasks) });\n  }\n\n  deleteTodoItem(itemID) {\n    this.setState(prevState => ({\n      todoData: prevState.todoData.filter(todo => todo.id !== itemID),\n    }));\n  }\n\n  addTodoItem(todoTitle) {\n    const newID = Settings.ID.mappingFn();\n    const newTodoItem = { id: `${newID}`, title: todoTitle, status: 'TODO' };\n\n    this.setState(prevState => ({\n      todoData: [...prevState.todoData.map(todo => Object.assign({}, todo)), newTodoItem],\n    }));\n  }\n\n  updateTodoItem({ itemID, title, status }) {\n    const updatedTask = { id: `${itemID}` };\n\n    if (title) updatedTask.title = title;\n    if (status) updatedTask.status = status;\n\n    const stateUpdator = (prevState) => {\n      const updatedTodoData = prevState.todoData.map((task) => {\n        if (task.id !== itemID) return Object.assign({}, task);\n        return Object.assign(task, updatedTask);\n      });\n\n      return { todoData: updatedTodoData };\n    };\n\n    this.setState(stateUpdator);\n  }\n\n  render() {\n    const { todoData } = this.state;\n\n    return (\n      <StyledTodo.Main>\n        <StyledTodo.Header>\n          <h1>To-Do List</h1>\n          <p>Every big dish starts with one small bite</p>\n        </StyledTodo.Header>\n        <StyledTodo.Input placeholder=\"Hello, world!\" onSubmit={this.addTodoItem} />\n        <StyledTodo.FoldableList\n          ItemTemplate={StyledTodo.Item}\n          todoData={todoData}\n          onDelClick={this.deleteTodoItem}\n          updateFn={this.updateTodoItem}\n        />\n      </StyledTodo.Main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './style/index.scss';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}