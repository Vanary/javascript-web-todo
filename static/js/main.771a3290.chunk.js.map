{"version":3,"sources":["Lib.network.js","Lib.components.js","App.styled.js","App.js","serviceWorker.js","index.js"],"names":["_callee","apiURI","init","data","json","regenerator_default","a","wrap","_context","prev","next","method","headers","Headers","Content-Type","mode","fetch","sent","abrupt","stop","this","_asyncGetTodoJson","TodoInput","_Component","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","className","placeholder","inherits","createClass","key","value","react_default","createElement","_StyledInput","type","Component","TodoHeader","_Component2","_this2","TodoItem","_this3","todoTitle","StyledTodoItem","styled","withConfig","displayName","componentId","TodoList","_Component4","_this4","state","_this5","then","setState","map","item","idx","id","title","_StyledDiv","theme","highlight","highlightReverse","background","boxShadow","alert","StyledMain","main","App_styled_templateObject","StyledTodoHeader","App_styled_templateObject2","StyledTodoInput","_templateObject3","StyledTodoList","_templateObject4","App","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.771a3290.chunk.js","sourcesContent":["async function _asyncGetTodoJson(apiURI) {\n  const init = {\n    method: \"GET\",\n    headers: new Headers({\n      \"Content-Type\": \"application/json\"\n    }),\n    mode: \"cors\"\n  };\n\n  const data = await fetch(apiURI, init);\n  const json = await data.json();\n\n  return json;\n}\n\nexport default _asyncGetTodoJson;\n","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport \"styled-components/macro\";\nimport _asyncGetTodoJson from \"./Lib.network\";\n\nexport class TodoInput extends Component {\n  constructor(props) {\n    super(props);\n    this.className = props.className;\n    this.placeholder = props.placeholder;\n  }\n\n  render() {\n    return (\n      <div className={this.className}>\n        <input placeholder={this.placeholder} css=\"\" type=\"text\" />\n        <button>{`Add Item`}</button>\n      </div>\n    );\n  }\n}\n\nexport class TodoHeader extends Component {\n  constructor(props) {\n    super(props);\n    this.className = props.className;\n  }\n\n  render() {\n    return (\n      <header className={this.className}>\n        <h1>{`To-Do List`}</h1>\n        <p>{`Every big dish starts with one small bite`}</p>\n      </header>\n    );\n  }\n}\n\nclass TodoItem extends Component {\n  constructor(props) {\n    super(props);\n    this.className = props.className;\n  }\n\n  render() {\n    return (\n      <li className={this.className}>\n        <span>{this.props.todoTitle}</span>\n        <button>{`X`}</button>\n      </li>\n    );\n  }\n}\n\nconst StyledTodoItem = styled(TodoItem)`\n  display: grid;\n  grid-template-columns: auto 10%;\n  grid-template-rows: 10% auto 10%;\n  padding: 1rem;\n  margin: 1rem auto;\n  background-color: white;\n\n  span {\n    grid-column: 1;\n    grid-row: 2;\n  }\n  button {\n    grid-column: 2;\n    grid-row: 2;\n    color: red;\n    border: none;\n    background: none;\n    font-size: 2rem;\n  }\n`;\n\nexport class TodoList extends Component {\n  constructor(props) {\n    super(props);\n    this.className = props.className;\n    this.apiURI = props.apiURI;\n    //json: [{title(str), id(int), status(str)}]\n    this.state = { json: [] };\n  }\n\n  componentDidMount() {\n    _asyncGetTodoJson(this.apiURI).then(json => this.setState({ json }));\n  }\n\n  render() {\n    if (!this.state.json[0])\n      return (\n        <div css=\"place-self: center;\" className={this.className}>\n          Loading...\n        </div>\n      );\n\n    return (\n      <div className={this.className}>\n        <h2>{`Things to Do`}</h2>\n        <button>{`Fold`}</button>\n        <ul>\n          {this.state.json.map((item, idx) => (\n            <StyledTodoItem\n              key={item.id ? item.id : idx}\n              todoTitle={item.title}\n            />\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n","import styled from \"styled-components\";\nimport { TodoHeader, TodoInput, TodoList } from \"./Lib.components\";\n\nconst theme = {\n  color: {\n    highlight: \"#0aa\",\n    highlightReverse: \"white\",\n    background: \"lightcyan\",\n    boxShadow: \"#888\",\n    alert: \"#a00\"\n  }\n};\n\nexport const StyledMain = styled.main`\n  display: grid;\n  grid-template-columns: 5% auto 5%;\n  grid-template-rows: 10% 15% 15% auto 10%;\n\n  background-color: ${theme.color.background};\n  box-shadow: 24px 24px ${theme.color.boxShadow};\n  position: absolute;\n  left: 20%;\n  top: 10%;\n  width: 60vw;\n  height: 80vh;\n  min-height: 64rem;\n  max-height: 80rem;\n`;\n\nexport const StyledTodoHeader = styled(TodoHeader)`\n  grid-column: 2 / 3;\n  grid-row: 2 / 3;\n  * {\n    margin: 1rem auto;\n  }\n  border-bottom: 1px solid lightgray;\n`;\n\nexport const StyledTodoInput = styled(TodoInput)`\n  display: grid;\n  grid-template-columns: auto 20%;\n  grid-template-rows: 10% auto 10%;\n  column-gap: 1rem;\n\n  input {\n    grid-column: 1;\n    grid-row: 2;\n    font-size: 2rem;\n    padding-left: 2rem;\n    border: unset;\n    outline: 1px solid ${theme.color.highlight};\n  }\n  button {\n    grid-column: 2;\n    grid-row: 2;\n    background: unset;\n    background-color: ${theme.color.highlight};\n    border: unset;\n    outline: 1px solid ${theme.color.highlightReverse};\n    font-size: 2rem;\n    color: white;\n  }\n\n  grid-column: 2 / 3;\n  grid-row: 3 / 4;\n`;\n\nexport const StyledTodoList = styled(TodoList)`\n  border-bottom: 1px solid lightgray;\n  display: grid;\n  grid-template-columns: 90% 10%;\n  grid-template-rows: 10% 10% auto;\n\n  grid-column: 2 / 3;\n  grid-row: 4;\n  font-size: 2rem;\n\n  h2 {\n    grid-column: 1;\n    grid-row: 2;\n  }\n  & > button {\n    grid-column: 2;\n    grid-row: 2;\n    background: unset;\n    border: 1px solid ${theme.color.highlight};\n    font-size: 2rem;\n    color: ${theme.color.highlight};\n  }\n  ul {\n    grid-row: 3;\n    grid-column: 1 / 3;\n  }\n`;\n","import React, { Component } from \"react\";\nimport {\n  StyledMain,\n  StyledTodoHeader,\n  StyledTodoInput,\n  StyledTodoList\n} from \"./App.styled\";\n\nclass App extends Component {\n  render() {\n    return (\n      <StyledMain>\n        <StyledTodoHeader />\n        <StyledTodoInput placeholder={`Hello, world!`} />\n        <StyledTodoList apiURI={\"http://crong.codesquad.kr:8080/todo\"} />\n      </StyledMain>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.scss\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}